# Generated by Django 5.1.2 on 2024-10-12 03:11

from django.db import migrations, models

import app.models.user


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                ("id", models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "uid",
                    models.CharField(db_index=True, editable=False, max_length=58, unique=True, verbose_name="UID"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="created_at")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="updated_at")),
                ("username", models.CharField(max_length=20, unique=True, verbose_name="username")),
                ("email", models.EmailField(max_length=254, unique=True, verbose_name="email address")),
                ("is_active", models.BooleanField(default=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", app.models.user.UserManager()),
            ],
        ),
    ]
